---
title: "Aircraft Activity"
author: "Patrick Moore"
format: html
server: shiny
---

# Set up environment

We rely on the tidyverse to work with our data and `RCurl` to get a current version of the FAA ownership database.

```{r setup}

library(bslib)
library(directlabels)
library(tidyverse)
library(RCurl)      # For downloading the FAA database
library(shiny)      # For interactive plots
library(svglite)
library(svgPanZoom)

```

# Import complaints from Airnoise.io

Export the complaint database from airnoise.io in CSV format. If it is zipped, it can remain so because `readr::read_csv()` handles that for us.

`anCsvFilesPath` must indicate the path at which the exported database has been saved (the example path is listed in a Windows-friendly format).

```{r Import-CSV}

anCsvFilesPath <- 'E:\\Database\\airnoise_complaints_2024-06-24.zip'

airnoiseComplaints <- read_csv(anCsvFilesPath)

```

# Preliminary cleaning of complaints

The minimum data necessary to gain insights about a given complaint will include the registration field, so we drop any row without it.

Some columns include spaces and special characters, so we also clean them by replacing spaces with underscores and removing parentheses.

```{r Initial-cleaning}

airnoiseComplaints <- drop_na(airnoiseComplaints, registration)

# Repair some badly-named columns
airnoiseComplaints <- airnoiseComplaints %>%
  rename_with(
    ~ tolower(str_replace_all(.x, " ", "_") %>%
      str_remove_all("[()]"))
    )

```

# Download and import FAA ownership data

Download the FAA registration database if it doesn't exist or is too old. This is helpful to ensure that owners named similarly are indeed the same as one another (to clean misspellings, etc.). The variable `maxAgeDays` is set at 14 initially; this is an arbitrary value. We change the `name` field as it's the name of the principal owner, so `owner` is more specific and will help distinguish from the `operator` name which we'll use in a different way (to show who is believed or likely to be using the aircraft).

```{r Import-FAA-ownership-data}

# How old can the file be before it needs to be re-downloaded?
maxAgeDays <- 14

# Specify the URL of the file you want to download
faaUrl <- "https://registry.faa.gov/database/ReleasableAircraft.zip"

# Specify the file name and location to save the file on your computer
projectPath <- "E:\\Database\\Public Datasets\\FAA Aircraft List\\"
archiveName <- "ReleasableAircraft.zip"
extractPath <- paste0(projectPath,"\\ReleasableAircraft")
archivePath <- paste0(projectPath, archiveName)
ownershipCsvPath <- paste0(extractPath,"\\MASTER.txt")
ownershipCsvNotExists <- !file.exists(ownershipCsvPath)

# Function to assess how old file can be
fileTooOld=function(maxAgeDays, path){
  isTooOld <- file.mtime(path) <= now() - days(maxAgeDays)
  return(isTooOld)
}

# Function to streamline download
registryDownload=function(srcUrl, destPath){

  # Download the FAA database
  f = CFILE(destPath, mode="wb")
  curlPerform(url = srcUrl, writedata = f@ref, noprogress = FALSE)
  close(f)
}

if ( ownershipCsvNotExists || fileTooOld(maxAgeDays, ownershipCsvPath) ) {
    registryDownload(faaUrl,archivePath)
    unzip(archivePath,
          files = "MASTER.txt",
          exdir = extractPath,
          overwrite = TRUE)
}

getOwners <- function() {
  owners <- read_csv(
    ownershipCsvPath,
    trim_ws = TRUE,
    name_repair = "unique_quiet",
    show_col_types = FALSE,
    # leave nothing to chance
    col_select = c(
      "hexId"          = "MODE S CODE HEX",
      "nNumber"        = "N-NUMBER",
      "serialNumber"   = "SERIAL NUMBER",
      "mfrMdlCode"     = "MFR MDL CODE",
      "engMfrMdl"      = "ENG MFR MDL",
      "yearMfr"        = "YEAR MFR",
      "typeRegistrant" = "TYPE REGISTRANT",
      "owner"          = "NAME",
      "street"         = "STREET",
      "street2"        = "STREET2",
      "city"           = "CITY",
      "state"          = "STATE",
      "zipCode"        = "ZIP CODE",
      "region"         = "REGION",
      "county"         = "COUNTY",
      "country"        = "COUNTRY",
      "lastActionDate" = "LAST ACTION DATE",
      "certIssueDate"  = "CERT ISSUE DATE",
      "certification"  = "CERTIFICATION",
      "typeAircraft"   = "TYPE AIRCRAFT",
      "typeEngine"     = "TYPE ENGINE",
      "statusCode"     = "STATUS CODE",
      "modeSCode"      = "MODE S CODE",
      "fractOwner"     = "FRACT OWNER",
      "airWorthDate"   = "AIR WORTH DATE",
      "otherNames1"    = "OTHER NAMES(1)",
      "otherNames2"    = "OTHER NAMES(2)",
      "otherNames3"    = "OTHER NAMES(3)",
      "otherNames4"    = "OTHER NAMES(4)",
      "otherNames5"    = "OTHER NAMES(5)",
      "expirationDate" = "EXPIRATION DATE",
      "uniqueId"       = "UNIQUE ID",
      "kitMfr"         = "KIT MFR",
      "kitMdl"         = "KIT MODEL"
    ),
    col_types = list(
      "N-NUMBER"         = col_character(),
      "SERIAL NUMBER"    = col_character(),
      "MFR MDL CODE"     = col_factor(),
      "ENG MFR MDL"      = col_factor(),
      "YEAR MFR"         = col_integer(),
      "TYPE REGISTRANT"  = col_factor(),
      "NAME"             = col_character(),
      "STREET"           = col_character(),
      "STREET2"          = col_character(),
      "CITY"             = col_factor(),
      "STATE"            = col_factor(),
      "ZIP CODE"         = col_character(),
      "REGION"           = col_factor(),
      "COUNTY"           = col_factor(),
      "COUNTRY"          = col_factor(),
      "LAST ACTION DATE" = col_date(format = "%Y%m%d"),
      "CERT ISSUE DATE"  = col_date(format = "%Y%m%d"),
      "CERTIFICATION"    = col_factor(),
      "TYPE AIRCRAFT"    = col_factor(),
      "TYPE ENGINE"      = col_factor(),
      "STATUS CODE"      = col_factor(),
      "MODE S CODE"      = col_character(),
      "FRACT OWNER"      = col_character(),
      "AIR WORTH DATE"   = col_date(format = "%Y%m%d"),
      "OTHER NAMES(1)"   = col_character(),
      "OTHER NAMES(2)"   = col_character(),
      "OTHER NAMES(3)"   = col_character(),
      "OTHER NAMES(4)"   = col_character(),
      "OTHER NAMES(5)"   = col_character(),
      "EXPIRATION DATE"  = col_date(format = "%Y%m%d"),
      "UNIQUE ID"        = col_character(),
      "KIT MFR"          = col_factor(),
      "KIT MODEL"        = col_factor(),
      "MODE S CODE HEX"  = col_character()
    )
  )
  return(owners)
}

```

## Join complaint and ownership data

Our complaints will left join with the ownership data such that, even if there's an issue with the FAA database, we'll still have the complaints - it will just be more difficult (or require a different method) to group observations together by owner.

```{r Left-join-complaints-with-ownership-data}

# Join these owner data with the aircraft seen.
airnoiseComplaints <- left_join(
  x = airnoiseComplaints,
  # Prepend 'N' to FAA nNumber as these are all US registrations
  y = mutate(.data = getOwners(), nNumber = paste0("N", nNumber)),
  by = join_by(registration == nNumber)
)

```

Let's take a look at some of the operators we found in our complaints, summarized by number of complaints:

```{r Review-operator-names}

airnoiseComplaints %>%
  count(operator, sort = TRUE)

```

# Review and clean aircraft operators for schools, clubs, etc.

-   Some operators are listed as "unknown".

-   Some operators have spelled their name multiple ways, like Solberg Aviation

-   One owner has two spellings of its name: SVETFUL / SVETFUR should be SvetFur Aviation LLC <https://opencorporates.com/companies/us_sc/889878> - apparently their agent is Anne Conder who is also listed as Mustang Sally's agent. This suggests that they're a leasing company, not the actual operator, which comes into play later.

-   "George Walker Field" is the old name of Somerset Airport. Judging by the address and their website, the listings for "George Walker Field" and "Somerset Air Service" are the same flight school.

-   Other names, like the flights school "AMERIFLYERS(...)" can be shortened to a common name like "American Flyers".

```{r Inspect-specific-operator-names}

airnoiseComplaints %>%
  filter(operator == "unknown") %>%
  count(operator, owner, state, city)

airnoiseComplaints %>%
  filter(
    str_detect(
      operator,
      regex("^SOLBERG AV.*", ignore_case=TRUE) )
  ) %>%
  count(operator, state, city)

airnoiseComplaints %>%
  filter(
    str_detect(
      operator,
      regex("SVETFU[LR].*", ignore_case=TRUE) )
  ) %>%
  count(operator, state, city)

airnoiseComplaints %>%
  filter(
    str_detect(
      operator,
      regex(".*GEORGE WALKER.*|^SOMERSET AIR.*", ignore_case=TRUE) )
  ) %>%
  count(operator, state, city)

airnoiseComplaints %>%
  filter(
    str_detect(
      operator,
      regex("^FLYING ZEBRA.*", ignore_case=TRUE) )
  ) %>%
  count(operator, state, city)

airnoiseComplaints %>%
  filter(
    str_detect(
      operator,
      regex("^AMERIFLYERS.*", ignore_case=TRUE) )
  ) %>%
  count(operator, state, city)
  
```

Some data suggests that these aircraft from Christiansen and Mustang Sally are all being leased and/or being used for training flights by Infinity Flight Group out of TTN. SvetFur aircraft are also flying out of TTN and taxiing back to the same tiedown as Infinity aircraft. Further, SvetFur shares an agent with Mustang Sally Aviation. This seems sufficient to suspect they're all being operated as training flights by Infinity Flight group for our analysis.

```{r Clean-operator-names}

airnoiseComplaints %>% count(operator, sort = TRUE)

airnoiseComplaints <- airnoiseComplaints %>%
  mutate(
    operator = case_when(
      # Simple transforms
      operator == "unknown" ~ owner, # copy the owner field if operator unknown
      owner == "AMERIFLYERS OF TEXAS INC" ~ "American Flyers",             # School
      owner == "BLUE SKY AVIATION ASSOCIATION INC" ~ "Blue Sky Avn Assoc", # Club
      owner == "CERTIFIED AVIATION LLC" ~ "Certified Flyers",              # School
      owner == "LUVSFLYING FLIGHT TRAINING LLC" ~ "Luvsflying Flt Trn",    # School
      owner == "MACH 1 PILOTS ASSOCIATION INC" ~ "Mach 1 Pilots Assoc", # Club
      owner == "RARITAN VALLEY FLYING SCHOOL" ~ "Princeton Fl Schl", # School
      owner == "RICHMOND PILOTS CORP" ~ "Richmond Pilots",        # Club
      owner == "RTD AVIATION LLC" ~ "TriState Avn",          # School
      owner == "SKY AVIATION CORP" ~ "Sky Avn",        # Possibly an individual
      # More complex cases
      str_detect(
        operator,
        regex("^SOLBERG AV.*",
              ignore_case=TRUE) ) ~
        "Solberg Avn",       # School/rental
      str_detect(
        operator,
        regex(".*GEORGE WALKER.*|^SOMERSET AIR.*",
              ignore_case=TRUE) ) ~
        "Somerset Air Svc",  # School/rental
      str_detect(
        operator,
        regex("^FLYING ZEBRA.*",
              ignore_case=TRUE) ) ~
        "Flying Zebra",      # Charter
      str_detect(
        operator,
        regex("^INFINITY FLIGHT G.*|^MUSTANG SALLY.*|^CHRISTIANSEN AV.*|^FOX LEASING.*|SVETFU[LR].*",
              ignore_case=TRUE) ) ~
        "Infinity Flt Grp",  # School
      str_detect(
        operator,
        regex("^AA[ -]AERO",
              ignore_case=TRUE) ) ~
        "Air Fleet Trn Sys", # School, 14 a/c as of 6/25/24
      str_detect(
        operator,
        regex("^AIR[- ]?MODS FLIGHT",
              ignore_case=TRUE) ) ~
        "Air-Mods Flt Acdmy", # School/rental
      str_detect(
        operator,
        regex("150TH AERO.*",
              ignore_case=TRUE) ) ~
        "150th Aero", # Club
      .default = operator    # leave it alone if no match found here
    )
  )

airnoiseComplaints %>% count(operator, sort = TRUE)

```

```{r Add-base-airport-column}

# Some aircraft or operators have a known base of operations. We create a new column for that.

airnoiseComplaints <- airnoiseComplaints %>%
  mutate(
    airport_base = case_when(
      # Solberg (Readington)
      operator == "Solberg Avn"         ~ "N51",
      operator == "Blue Sky Avn Assoc"  ~ "N51",
      operator == "Sky Avn"             ~ "N51",
      # Somerset
      operator == "Somerset Air Svc"    ~ "KSMQ",
      # White Plains
      operator == "Flying Zebra"        ~ "KHPN",
      # Morristown Muni
      operator == "150th Aero"          ~ "KMMU",
      operator == "American Flyers"     ~ "KMMU",
      operator == "Certified Flyers"    ~ "KMMU",
      # Trenton Mercer
      operator == "Infinity Flt Grp"    ~ "KTTN",
      # Central Jersey (Hillsborough)
      operator == "TriState Avn"        ~ "47N",
      operator == "Mach 1 Pilots Assoc" ~ "47N",
      # Linden
      operator == "Luvsflying Flt Trn"  ~ "KLDJ",
      operator == "Richmond Pilots"     ~ "KLDJ",
      # Princeton
      operator == "Princeton Fl Schl"   ~ "39N",
      # Essex County/Caldwell
      operator == "Air Fleet Trn Sys"   ~ "KCDW",
      # Trenton-Robbinsville
      operator == "Air-Mods Flt Acdmy"  ~ "N87"
      # Lincoln Park/N07, Sussex/FWN
    )
  )

airnoiseComplaints %>% count(airport_base, sort = TRUE)

```

```{r Add-using-airport-column}

# We can figure out where planes are heading to or from if they filed a flight plan.

airnoiseComplaints <- airnoiseComplaints %>%
  mutate(airport_of_interest = case_when(
      # If took off at one of these airports, use it instead of base
      str_detect(origin, regex("K(CDW|EWR|JFK|LGA|MMU|TEB|SWF)"))      ~ origin,
      # If landing at one of these airports, use it instead of base or origin
      str_detect(destination, regex("K(CDW|EWR|JFK|LGA|MMU|TEB|SWF)")) ~ destination,
      # If the plane is known to be based somewhere locally, just use that.
      .default = airport_base
    )
  )

airnoiseComplaints %>% count(airport_of_interest, sort = TRUE)
```

```{r Specify-data-types}

airnoiseComplaints <-
  mutate(
    airnoiseComplaints,
    "event_date"      = mdy(event_date, tz = "EST"),
    "complaint_type"  = as_factor(complaint_type),
    "operation_type"  = as_factor(operation_type),
    "altitude_ft_msl" = as.integer(altitude_ft_msl),
    # "operator"      = as_factor(operator),
    "aircraft_type"   = as_factor(aircraft_type),
    "aircraft_model"  = as_factor(aircraft_model),
    # "callsign"      = as_factor(callsign),
    # "registration"  = as_factor(registration),
    "origin"          = as_factor(origin),
    "destination"     = as_factor(destination),
    "airport_base"    = as_factor(airport_base)
  )
```

# Visualize traffic by number of observations

```{r Visualize-traffic-by-number-of-observations}

# Get the total number of observations
totalComplaints <- nrow(airnoiseComplaints)

complaintsByOperator <- airnoiseComplaints %>%
  group_by(operator) %>%
  count(name = "nSightings") %>%
  mutate(percentage = nSightings / totalComplaints * 100) %>%
  # Exclude null/NA names and anything accounting for under .7%
  filter(percentage > .7 && !is.na(operator))

pltTrafficByNumberOfObservations <- complaintsByOperator %>%
  ggplot(aes(x=reorder(operator, nSightings), y=nSightings) ) +
  geom_segment(
    aes(
      linewidth = 2,
      x=reorder(operator, nSightings),
      xend=operator,
      y=0,
      yend=nSightings,
      color = nSightings
    )
  ) +
  # geom_point(size=3, aes(color=nSightings)) +
  coord_flip() +
  theme(
    panel.background = element_rect(fill = "gray75"),
    # panel.grid = element_line(color = "black"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_blank(),
    legend.position = "inside",
    legend.position.inside = c(.95, .05),
    legend.justification = c(1, 0),
    legend.key = element_rect(fill = NA),
  ) +
  scale_color_viridis_c(
    name = NULL,
    option = "viridis",
    direction = 1
  ) +
  xlab("Operator") +
  ylab("# of complaints") +
  labs(
    title = "Number of Sightings by Operator",
    subtitle = str_glue_data(
      .x = airnoiseComplaints,
      "Top Operators {min(event_date)} - {max(event_date)}"
    )
  )

```

This is a total of 1603 observations, during 41 days during which observations were recorded. The result is an average of 40 reports per day.

# Visualize traffic by base airport

```{r Visualize-traffic-by-base-airport}

# Get the total number of observations
totalComplaints <- nrow(airnoiseComplaints)

complaintsByBaseAirport <- airnoiseComplaints %>%
  group_by(airport_base) %>%
  count(name = "nSightings") %>%
  mutate(percentage = nSightings / totalComplaints * 100)

pltTrafficByBaseAirport <- complaintsByBaseAirport %>%
  filter(!is.na(airport_base)) %>% # Exclude null/NA airports
  ggplot( aes(x=reorder(airport_base, nSightings), y=nSightings) ) +
    geom_segment(
      aes(
        color = nSightings,
        x=reorder(airport_base, nSightings),
        xend=airport_base,
        y=0,
        yend=nSightings
      )
    ) +
    # geom_point(aes(size=3, color=nSightings)) +
    coord_flip() +
    theme(
      panel.background = element_rect(fill = "gray75"),
      panel.grid.minor.y = element_blank(),
      panel.grid.major.y = element_blank(),
      legend.position="none"
    ) +
    scale_color_viridis_c(
      name = NULL,
      option = "viridis",
      direction = 1
    ) +
    xlab("Based at") +
    ylab("# of complaints") +
    labs(
      title = "Number of Complaints by Base Airport",
      subtitle = str_glue_data(
        .x = airnoiseComplaints,
        "Top Airports {min(event_date)} - {max(event_date)}"
      )
    ) +
    annotate(
      geom = "label",
      x = 3,
      y = totalComplaints / 7,
      label = str_glue_data(
        .x = complaintsByBaseAirport,
        "We were unable to determine the home base of the\n",
        "aircraft involved in {sum(is.na(airport_base))}",
        " of {totalComplaints} complaints (",
        "{round(sum(is.na(airport_base)) / totalComplaints * 100)}%)"
        ),
      hjust = "right"
    )

```

# Are we sending complaints to the right airport?

On 6/24/2024, Teterboro's (KTEB) noise office reached out to report that our reports were showing many aircraft that were actually to or from Morristown (KMMU). Airnoise.io conveniently provides additional information from their flight plans, and the resulting visualization suggests that KTEB is indeed beyond KMMU in complaint volume coming from this location.

Additional context may strengthen the value of this conclusion even further: if I understand correctly, complaints for KTEB are submitted through a PlaneNoise "webtrak" system, and these complaints are routed to the Port Authority. Other Port Authority airports include KEWR, KLGA, and KJFK, so after summing these complaints, the Port Authority is responsible for double the report volume of KMMU.

```{r Visualize-traffic-by-airport-of-interest}

# Get the total number of observations
totalComplaints <- nrow(airnoiseComplaints)

complaintsByOriginOrDest <- airnoiseComplaints %>%
  group_by(airport_of_interest) %>%
  # add a count of sightings per airport
  count(name = "nSightings", sort = TRUE) %>%
  # reorder by number of sightings
  arrange(nSightings) %>%
  # add percentages and tag whether they're within PANYNJ jurisdiction
  mutate(percentage = nSightings / totalComplaints * 100,
         port_authority_affiliate = str_detect(
           airport_of_interest,
           "K(EWR|TEB|JFK|LGA|SWF)"
           ),
         ) %>%
  # remove rows where we don't know about the airport
  filter(!is.na(airport_of_interest))

pltComplaintsByAirportOfInterest <- ggplot(
  data = complaintsByOriginOrDest,
  aes(x=reorder(airport_of_interest, nSightings),
      y=nSightings,
      color=!port_authority_affiliate
      )
    ) +
  coord_flip() +
  geom_segment(
    aes(
      linewidth = 2,
      x = ,
      xend = airport_of_interest,
      y = 0,
      yend = nSightings
    ),
    show.legend = FALSE
    ) +
  # geom_point(size=4) +
  theme(
    panel.background = element_rect(fill = "darkgray"),
    panel.grid.minor.y = element_blank(),
    panel.grid.major.y = element_blank(),
    legend.position = "inside",
    legend.position.inside = c(.95, .5),
    legend.justification = c(1, .5),
    legend.key = element_rect(fill = NA),
    ) +
  scale_color_viridis_d(
    name = NULL,
    option = "viridis",
    direction = -1,
    labels = c("PANYNJ affiliate", "not affiliated")
    ) +
  xlab("Flying to or from") +
  ylab("# of complaints") +
  labs(
    title = "Number of Sightings by Origin or Destination Airport",
    subtitle = str_glue_data(
      .x = airnoiseComplaints,
      "Top Airports {min(event_date)} - {max(event_date)}")
    ) +
  annotate(
    geom = "label",
    x = 2,
    y = max(complaintsByOriginOrDest$nSightings),
    label = str_glue_data(.x = airnoiseComplaints,
      "We were unable to determine the\n",
      "origin or destination of the aircraft\n",
      "involved in {sum(is.na(airport_of_interest))}",
      "of {totalComplaints} complaints (",
      "{round(sum(is.na(airport_of_interest)) / totalComplaints * 100)}%)"
      ),
    hjust = "right")

```

# Construct a dashboard

## Set up cards and panels

```{r Shiny-cards-panels}

cards <- list(
  card(
    full_screen = TRUE,
    card_header("Number of Sightings by Operator"),
    plotOutput("pltTrafficByNumberOfObservations")
  ),
  card(
    full_screen = TRUE,
    card_header("# Complaints by Base Airport"),
    plotOutput("pltTrafficByBaseAirport")
  ),
  card(
    full_screen = TRUE,
    card_header("# Sightings by Origin or Destination Airport"),
    plotOutput("pltComplaintsByAirportOfInterest")
  )
)

navpanels <- list(
  nav_panel("Number of Sightings by Operator",
            plotOutput("pltTrafficByNumberOfObservations")
            ),
  nav_panel("# Complaints by Base Airport",
            plotOutput("pltTrafficByBaseAirport")
            ),
  nav_panel("# Sightings by Origin or Destination Airport",
            plotOutput("pltComplaintsByAirportOfInterest")
            )
  )

```

## Build the Shiny UI

```{r Shiny-UI}

# ui <- shinyUI(bootstrapPage(
#   svgPanZoomOutput(outputId = "main_plot")
# ))
ui <- page_sidebar(
  title = "Analysis of AirNoise.io Noise Complaints East of Solberg Airport (N51) in NJ",
  sidebar = sidebar(
    "Sidebar Text for your Sidebar"),
  navset_underline(!!!navpanels),
  dateRangeInput("dates",
                 "Filter observations/complaints by date:",
                 min = min(airnoiseComplaints$event_date),
                 max = max(airnoiseComplaints$event_date),
                 start = min(airnoiseComplaints$event_date),
                 end = max(airnoiseComplaints$event_date)
                 ),
  textOutput("datesAsText")
  # !!!cards
  )

```

# Define and run the Shiny Server

```{r Shiny-Server}

server <- function(input, output) {
  
  
  filterPlaneDetections <- reactive({
    planeDetections %>%
      filter(between(startDateTime,
                     left=ymd(input$dates[1]),
                     right=ymd(input$dates[2])
                     )
             )
  })
  
  #TODO: probably need to move our plotting functionality down into the Server section now?
  
  output$pltTrafficByNumberOfObservations <- renderPlot({
    pltTrafficByNumberOfObservations
    })
  output$pltTrafficByBaseAirport <- renderPlot({
    pltTrafficByBaseAirport
    })
  output$pltComplaintsByAirportOfInterest <- renderPlot({
    pltComplaintsByAirportOfInterest
    })
  output$datesAsText <- renderText({
    paste("you have selected", input$dates)
  })
}
  
  
runApp(list(ui=ui,server=server))

```

# Plots

## Traffic by # of Observations

```{r Plot-Traffic-By-Number-of-Observations}
renderPlot({
  pltTrafficByNumberOfObservations
  })
```

## Traffic by Base Airport

```{r Plot-Traffic-By-Base-Airport}
renderPlot({
  pltTrafficByBaseAirport
  })
```

## Complaints by Airport of Interest
```{r Plot-Complaints-By-Airport-of-Interest}
output$pltComplaintsByAirportOfInterest <- renderPlot({
  pltComplaintsByAirportOfInterest
  })
```

## Dates Input Element
```{r Input-dates}
output$datesAsText <- renderText({
  paste("you have selected", input$dates)
  })
```
